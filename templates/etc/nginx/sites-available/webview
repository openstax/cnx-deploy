{#
upstream prerender {
    server          localhost:3000;
    server          localhost:3001;
}
#}
server {
    listen          8081;
    server_name     {{ frontend_domain }};
    # FIXME How about putting the built distribution in /var/www?
    root            {{ source_dir | expanduser }}/webview/dist/;
    index           index.html;
    # try_files       $uri @prerender;
    try_files       $uri $uri/ /index.html;

    {% if not accounts_domain %}

    location /stub-login-form {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }
    {% endif %}

    location /login {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /callback {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /logout {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /users/profile {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /users/contents {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /users/search {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /publish {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location ~ ^/contents/.*@draft\.json {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location ~ ^/contents/.*@draft/users/me {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location ~ ^/contents/.*@draft/acceptance {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location ~ ^/resources$ {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    # Try to fetch resources from archive (most common)
    # and if they do not exist, fall back to cnx-authoring
    # from http://linuxplayer.org/2013/06/nginx-try-files-on-multiple-named-location-or-server
    location ~ ^/resources/.+ {
        proxy_pass http://{{ archive_host }}:{{ archive_port }};
        proxy_intercept_errors on;
        recursive_error_pages on;
        error_page 404 = @authoring;
    }

    location @authoring {
        proxy_pass http://{{ authoring_host }}:{{ authoring_port }};
    }

    location /resources/ {
        proxy_pass  http://{{ archive_host }}:{{ archive_port }};
    }

    location ~ ^.*/(data|scripts|styles|images|fonts)/(.*) {
        try_files   $uri $uri/ /$1/$2 =404;
    }

    location ~ /exports/(.+?)/(.+)$ {
        root        /var/www/;
        add_header  Content-Disposition "attachment; filename=$2";
        try_files   /files/$1 /files2/$1 =404;
    }

    location ~ /exports/(.+)$ {
        root        /var/www/;
        add_header  Content-Disposition "attachment; filename=$1";
        try_files   /files/$1 /files2/$1 =404;
    }

    {% if ansible_os_family != "Darwin" %}
    location /nginx_status {
        stub_status on;
        access_log  off;
    }

    {% endif %}
{#
    # Prerender for SEO
    location @prerender {
        # Support page prerendering for web crawlers
        set $prerender 0;
        if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest") {
            set       $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set       $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set       $prerender 0;
        }
        if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent)$") {
            set       $prerender 0;
        }
        if ($prerender = 1) {
            rewrite   .* /$scheme://$http_host$request_uri? break;
            proxy_pass http://prerender;
        }
        if ($prerender = 0) {
            rewrite   .* /index.html break;
        }
    }
#}
}
