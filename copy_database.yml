---
# This dumps the data from a production server
# This will dump the data into a new database, initialize db-migrator and migrate the data/schema.

- name: get database details
  hosts: database
  vars_prompt:
    - name: "source_db_host"
      prompt: "Where is the database hosted?"
      private: no
      default: prod09.cnx.org
    - name: "source_db_port"
      prompt: "What port is the database listening on?"
      private: no
      default: 5432
    - name: "db_name"
      prompt: "What database are we pull from to dump onto this machine?"
      private: no
      default: repository
  tasks:
    - set_fact:
        source_db_host: "{{ source_db_host }}"
        source_db_port: "{{ source_db_port }}"
        source_db_name: "{{ db_name }}"
        db_name: "{{ db_name }}_new"

- name: disable replicant
  hosts: replicant
  tasks:
    - name: stop replicant service
      become: yes
      service:
        name: postgresql
        state: stopped
    - name: remove data directory
      become: yes
      file:
        path: /var/lib/postgresql/{{ postgres_version }}/main/
        state: absent

- name: transfer database
  hosts: database
  vars:
    # If working with authoring, set venv_environment to 'authoring' at
    # and set dbmigrate_context_args value to `--content cnx-authoring`
    # at runtime.
    dbmigrate_context_args: "{{ migration_contexts|default('--context cnx-publishing --context cnx-archive') }}"
    db_connection_string: "dbname={{ db_name }} user=postgres host=localhost port=5432"
  tasks:
    - import_tasks: tasks/create_db.yml
      vars:
        db_owner: "postgres"
    - name: pipe database in
      shell: "set -o pipefail && pg_dump -U postgres -h {{ source_db_host }} -p {{ source_db_port }} {{ source_db_name }} | psql -U postgres {{ db_name }} -f -"
      args:
        executable: "/bin/bash"
    - name: migrate database
      debug:
        msg: "Now run the database migration if needed: /var/cnx/venvs/{{ venv_environment|default('publishing') }}/bin/dbmigrator --db-connection-string \"{{ db_connection_string }}\" ... migrate"
