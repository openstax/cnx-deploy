#!/bin/bash

# Create a cnx database dump for backup

backup_dir=/var/backups
DB_DUMP_BASE_NAME=cnx_dump

# defaults are set by an ansible playbook in cnx-deploy

ARCHIVE_DB_HOST={{ archive_db_host }}
ARCHIVE_DB_PORT={{ archive_db_port }}
ARCHIVE_DB_USER={{ archive_db_user }}
ARCHIVE_DB_NAME={{ archive_db_name }}

# default to provided values, accept positional parameters to override
# null or omitted trailing arguments are set to the defaults
# example: ./scriptname cnx_tea_backup tea00.cnx.org

if [[ $@ ]]
then
    DB_DUMP_BASE_NAME=${1:-$DB_DUMP_BASE_NAME}

    ARCHIVE_DB_HOST=${2:-$ARCHIVE_DB_HOST}
    ARCHIVE_DB_PORT=${3:-$ARCHIVE_DB_PORT}
    ARCHIVE_DB_USER=${4:-$ARCHIVE_DB_USER}
    ARCHIVE_DB_NAME=${5:-$ARCHIVE_DB_NAME}
fi

DB_DUMP_FILENAME=$backup_dir/$DB_DUMP_BASE_NAME.$(date +%Y-%m-%d).sql.gz

# Install clean up code
function cleanup {
    ls -1 -r "$backup_dir/$DB_DUMP_BASE_NAME"* | sed -n '4,$ p' | xargs rm -f
}
trap cleanup EXIT

pg_dump -h "$ARCHIVE_DB_HOST" -p "$ARCHIVE_DB_PORT" -U "$ARCHIVE_DB_USER" \
    "$ARCHIVE_DB_NAME" | gzip >"$DB_DUMP_FILENAME"
