---

- name: install S3 command line utils
  become: yes
  apt:
    name: s3cmd

- name: create temporary file for S3 configuration
  become: yes
  template:
    # using all-caps TMP here to get past .gitignore
    src: TMP/s3configresponse.txt
    dest: /tmp/s3configresponse.txt
    mode: 0600

- name: configure S3
  become: yes
  shell: /usr/bin/s3cmd --configure --config=/root/.s3cfg < /tmp/s3configresponse.txt
  args:
    creates: /root/.s3cfg

- name: remove temporary file for S3 configuration
  become: yes
  file:
    path: /tmp/s3configresponse.txt
    state: absent

- name: install archive backup script
  become: yes
  copy:
    src: usr/local/bin/cnx-backup-archive
    dest: /usr/local/bin/cnx-backup-archive
    mode: 0755

- name: install zodb backup script
  become: yes
  copy:
    src: usr/local/bin/cnx-backup-zodb
    dest: /usr/local/bin/cnx-backup-zodb
    mode: 0755

- name: create backup user's ssh key for zodb server for this environment
  become: yes
  user:
    name: backup
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/{{ hostvars[groups.zeo[0]].inventory_hostname }}_id_rsa
  register: key_result

- name: ensure backup user is present on the zodb server and get the home directory
  user:
    name: backup
    state: present
    shell: /bin/bash
  delegate_to: "{{ hostvars[groups.zeo[0]].inventory_hostname }}"
  register: remote_backup_user

- name: install restricted rsync script (provided with rsync)
  become: yes
  unarchive:
    src: /usr/share/doc/rsync/scripts/rrsync.gz
    dest: /usr/local/bin
    remote_src: yes
    mode: 0755
  delegate_to: "{{ hostvars[groups.zeo[0]].inventory_hostname }}"

- name: add authorized key to zodb server with restricted execution
  become: yes
  authorized_key:
    user: backup
    key: "{{ key_result.ssh_public_key }}"
    key_options: 'command="/usr/local/bin/rrsync -ro /var/backups/cnx-files",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-X11-forwarding'
  delegate_to: "{{ hostvars[groups.zeo[0]].inventory_hostname }}"

- name: create directory for restricted rsync
  become: yes
  files:
    path: "{{ remote_backup_user.home }}/cnx-files"
    state: directory
    mode: 0755
  delegate_to: "{{ hostvars[groups.zeo[0]].inventory_hostname }}"

- name: create zodb symlink
  become: yes
  file:
    src: /var/lib/cnx/cnx-buildout/var/filestorage
    dest: "{{ remote_backup_user.home }}/cnx-files/zodb"
    state: link
  delegate_to: "{{ hostvars[groups.zeo[0]].inventory_hostname }}"

- name: create backup destination directory
  become: yes
  file:
    path: "{{ remote_backup_user.home }}/cnx-backups"
    state: directory
    owner: backup
    group: backup
    mode: 0775

# TODO: dtw - 2018-09-13 - remove this block after production deploy
- name: remove old weekly backup
  become: yes
  file:
    path: /etc/cron.weekly/cnx-backup
    state: absent

- name: set up weekly backup
  become: yes
  template:
    # The filename begins with zz- so these long running processes run after most other jobs, the number sets up the potential
    # for further ordering. The jobs in cron.weekly, etc., are run by run-parts in lexical order for the C locale and only 
    # support names with [a-zA-Z0-9_-].
    src: etc/cron.weekly/zz-90-backup-cnx-ENVIRONMENT
    dest: /etc/cron.weekly/zz-90-backup-cnx-{{ inventory_dir | basename }}
    mode: 0755

- name: install lean query generating script
  become: yes
  when:
    - slim_dumps | default(False)
  copy:
    src: usr/local/bin/generate_lean_query.py
    dest: /usr/local/bin/generate_lean_query.py
    mode: 0755

- name: install slim dump script
  become: yes
  when:
    - slim_dumps | default(False)
  template:
    src: usr/local/bin/cnx-slim-dump
    dest: /usr/local/bin/cnx-slim-dump
    mode: 0755

- name: set up slim dumps
  become: yes
  when:
    - slim_dumps | default(False)
  file:
    src: /usr/local/bin/cnx-slim-dump
    dest: /etc/cron.weekly/cnx-slim-dump
    state: link
    force: yes
