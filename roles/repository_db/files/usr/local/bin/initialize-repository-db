#!/usr/bin/env python2
from __future__ import print_function

import os
import sys
import argparse
import shlex
from subprocess import PIPE, Popen


EXECUTABLE_ENV = '/var/cnx/venvs/publishing/'


# BBB (3-Feb-12017) Backwards compatible database initialization.

DEPRECATED_ARCHIVE_INIT_DB_CMD = "{} /etc/cnx/archive/app.ini".format(os.path.join(EXECUTABLE_ENV, 'bin/cnx-archive-initdb'))
DEPRECATED_PUBLISHING_INIT_DB_CMD = "{} /etc/cnx/publishing/app.ini".format(os.path.join(EXECUTABLE_ENV, 'bin/cnx-publishing-initdb'))

# These messages are returned by the initdb commands when the database exists.
KNOWN_ARCHIVE_OK = 'Database is already initialized'
KNOWN_PUBLISHING_OK = 'psycopg2.ProgrammingError: type \"publication_states\" already exists'


def is_using_deprecated_init():
    """Evaluate whether we are in a deprecated runtime environment."""
    flag_file = os.path.join(EXECUTABLE_ENV, 'bin/cnx-publishing-initdb')
    if os.path.exists(flag_file):
        return True
    else:
        return False


def run_deprecated_init():
    # FIXME (30-Jan-12017) The cnx-archive-initdb command is deprecated.
    retcode, out, err = call(DEPRECATED_ARCHIVE_INIT_DB_CMD)
    if retcode > 0 and KNOWN_ARCHIVE_OK not in err:
        print_issue('cnx-archive-initdb', out, err)
        return 1
    retcode, out, err = call(DEPRECATED_PUBLISHING_INIT_DB_CMD)
    if retcode > 0 and KNOWN_PUBLISHING_OK not in err:
        print_issue('cnx-publishing-initdb', out, err)
        return 1
    executable = os.path.join(EXECUTABLE_ENV, 'bin/dbmigrator')
    cmd = "{} --config /etc/cnx/publishing/app.ini --context cnx-archive --context cnx-publishing init".format(executable)
    retcode, out, err = call(cmd)
    if retcode > 0:
        print_issue('dbmigrator init', out, err)
        return 1
    return 0
# /BBB


def call(cmd, env=None):
    """Call a commnd and return the returncode, stdout and stderr."""
    proc = Popen(shlex.split(cmd), stderr=PIPE, stdout=PIPE, env=env)
    out, err = proc.communicate()
    return (proc.returncode, out, err,)


def print_issue(step, out, err):
        msg = "Ouch! @ {} \nSTDOUT:\n{}STDERR:\n{}".format(step, out, err)
        print(msg, file=sys.stderr)


def make_parser():
    parser = argparse.ArgumentParser()
    # database arguments
    parser.add_argument('host')
    parser.add_argument('port')
    parser.add_argument('name')
    parser.add_argument('user')
    return parser


def run_cnxdb_cmd(subcmd, args, extra_args=''):
    """`subcmd` is the subcommand, something like `init` or `venv`.
    `args` is the parsed args from argparse.
    `extra_args` is a string of other commandline arguments.
    """
    executable = os.path.join(EXECUTABLE_ENV, 'bin/cnx-db')
    db_url = 'postgres://{}@{}:{}/{}'.format(
        args.user, args.host, args.port, args.name)
    db_super_url = 'postgres://postgres@{}:{}/{}'.format(
        args.host, args.port, args.name)
    cmd = ' '.join([executable, subcmd, extra_args])
    retcode, out, err = call(cmd, env={'DB_URL': db_url,
                                       'DB_SUPER_URL': db_super_url})
    if retcode > 0:
        print_issue(subcmd, out, err)
        sys.exit(1)


def main(argv=None):
    parser = make_parser()
    args = parser.parse_args(argv)

    # Run deprecated init if check passes
    if is_using_deprecated_init():
        return run_deprecated_init()

    # Initialize DB
    run_cnxdb_cmd('init', args)

    # Initialize venv in db
    run_cnxdb_cmd('venv', args)

    # Initialize db-migrator
    executable = os.path.join(EXECUTABLE_ENV, 'bin/dbmigrator')
    cmd = "{} --config /etc/cnx/publishing/app.ini --context cnx-db init".format(executable)
    retcode, out, err = call(cmd)
    if retcode > 0:
        print_issue('dbmigrator init', out, err)
        return 1

    # Database migration happens after cnx-publishing install.
    return 0


if __name__ == '__main__':
    sys.exit(main())
