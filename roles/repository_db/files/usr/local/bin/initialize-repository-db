#!/usr/bin/env python2
from __future__ import print_function

import os
import sys
import argparse
import shlex
from subprocess import PIPE, Popen


EXECUTABLE_ENV = '/var/cnx/venvs/publishing/'

# FIXME These initialize tasks run to failures. Ideally, it's be nice if
#       they gracefully bailed out with a meaningful message.
DEPRECATED_EXECUTABLE = os.path.join(EXECUTABLE_ENV, 'bin/cnx-archive-initdb')
DEPRECATED_INIT_DB_CMD = "{} /etc/cnx/archive/app.ini".format(DEPRECATED_EXECUTABLE)

# This message is returned by the initdb command when the database exists.
KNOWN_OK = "Database is already initialized"


def call(cmd):
    """Call a commnd and return the returncode, stdout and stderr."""
    proc = Popen(shlex.split(cmd), stderr=PIPE, stdout=PIPE)
    out, err = proc.communicate()
    return (proc.returncode, out, err,)


def print_issue(step, out, err):
        msg = "Ouch! @ {} \nSTDOUT:\n{}STDERR:\n{}".format(step, out, err)
        print(msg, file=sys.stderr)


def make_parser():
    parser = argparse.ArgumentParser()
    # database arguments
    parser.add_argument('host')
    parser.add_argument('port')
    parser.add_argument('name')
    parser.add_argument('user')
    return parser

def run_cnxdb_cmd(subcmd, args, extra_args=''):
    """`subcmd` is the subcommand, something like `init` or `venv`.
    `args` is the parsed args from argparse.
    `extra_args` is a string of other commandline arguments.
    """
    executable = os.path.join(EXECUTABLE_ENV, 'bin/cnx-db')
    cmd = "{0} {1} -h {2.host} -p {2.port} -d {2.name} -U {2.user} {3}".format(executable, subcmd, args, extra_args)
    retcode, out, err = call(cmd)
    if retcode > 0:
        print_issue(subcmd, out, err)
        sys.exit(1)


def main(argv=None):
    parser = make_parser()
    args = parser.parse_args(argv)

    # Initialize DB
    using_deprecated_logic = True
    if os.path.exists(DEPRECATED_EXECUTABLE):
        # FIXME (30-Jan-12017) The cnx-archive-initdb command is deprecated.
        retcode, out, err = call(DEPRECATED_INIT_DB_CMD)
        if retcode > 0 and KNOWN_OK not in err:
            print_issue('initdb', out, err)
            sys.exit(1)
    else:
        using_deprecated_logic = False
        run_cnxdb_cmd('init', args)

    # Initialize venv in db
    # FIXME (15-Nov-2016) The venv logic only works with localhost at this time.
    #       It doesn't fail when not localhost, instead it just warns...
    #       As a result, we are temporarily hardcoding this to localhost, which
    #       means archive will be required to be on the same host as postgres.
    #       https://github.com/Connexions/cnx-deploy/issues/145
    run_cnxdb_cmd('venv', args)

    executable = os.path.join(EXECUTABLE_ENV, 'bin/dbmigrator')
    cmd = "{} --config /etc/cnx/publishing/app.ini --context cnx-archive --context cnx-publishing init".format(executable)
    retcode, out, err = call(cmd)
    if retcode > 0:
        print_issue('dbmigrator init', out, err)
        sys.exit(1)

    # Database migration happens after cnx-publishing install.
    return 0


if __name__ == '__main__':
    sys.exit(main())
