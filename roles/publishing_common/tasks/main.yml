---
# Installs publishing with all the dependencies.

# +++
# Prerequisites
# +++

# TODO Kill this dependency by prebuilding or using packaged versions
#      of the application/library.
- name: install build utilities
  become: yes
  apt:
    name:
      - build-essential
      - git
      - libpq-dev
      - zlib1g-dev
    state: present

- name: install postgres client
  become: yes
  apt:
    name: "postgresql-client-{{ postgres_version }}"
    state: present

# +++
# Install virtualenv(s)
# +++

- stat:
    path: "/var/cnx/venvs"
  register: venvs_dir

- name: ensure the venvs directory exists
  become: yes
  when: not venvs_dir.stat.exists
  file:
    path: "/var/cnx/venvs"
    state: directory
    mode: 0755
    owner: "{{ venvs_owner|default('www-data') }}"

- name: create a folder for python2 virtualenvs
  become: yes
  file:
    path: "/var/cnx/venvs/python2"
    state: directory
    mode: 0755
    owner: "{{ venvs_owner|default('www-data') }}"

- name: set the owner of venvs directory
  become: yes
  file:
    path: "/var/cnx/venvs"
    state: directory
    recurse: yes
    owner: "{{ venvs_owner|default('www-data') }}"

- name: create the publishing virtualenv - old fallback virtualenv
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: pip
    virtualenv: "/var/cnx/venvs/publishing"
    virtualenv_python: python2
    state: latest

- name: create the publishing virtualenv - new virtualenv in python2 folder
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: pip
    virtualenv: "/var/cnx/venvs/python2/publishing"
    virtualenv_python: python2
    state: latest

# +++
# Install
# +++

- name: ensure /var/www exists
  become: yes
  file:
    path: "/var/www"
    state: directory
    mode: 0755
    owner: www-data
    group: www-data

- name: ensure /var/lib/cnx exists
  become: yes
  file:
    path: "/var/lib/cnx"
    state: directory
    mode: 0755
    owner: www-data
    group: www-data

- name: copy over requirements.txt
  become: yes
  copy:
    src: "{{ inventory_dir }}/files/{{ item }}-requirements.txt"
    dest: "/var/lib/cnx/{{ item }}-requirements.txt"
    owner: www-data
    group: www-data
    mode: 0755
  with_items:
    # We do both because these are sometimes ref'ing one another.
    - publishing

# Upgrades pip in both the fallback venv and new python2 venv
# FIXME: Remove fallback venv after confirmation new python2 venv works
- name: upgrade pip
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: pip
    virtualenv: "{{ item }}"
    state: latest
  with_items:
    - "/var/cnx/venvs/publishing"
    - "/var/cnx/venvs/python2/publishing"

# Installs distribute in both the rollback venv and new python2 venv
# FIXME: Remove fallback venv after confirmation new python2 venv works
- name: ensure that distribute is installed
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  easy_install:
    name: distribute
    virtualenv: "{{ item }}"
    state: latest
  with_items:
    - "/var/cnx/venvs/publishing"
    - "/var/cnx/venvs/python2/publishing"

- name: ensure that setuptools<45 is installed
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: setuptools<45
    virtualenv: "{{ item }}"
    state: present
  with_items:
    - "/var/cnx/venvs/publishing"
    - "/var/cnx/venvs/python2/publishing"

- name: install publishing into rollback venv
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    requirements: "/var/lib/cnx/publishing-requirements.txt"
    virtualenv: "/var/cnx/venvs/publishing"
    state: latest

- name: install publishing into the new virtualenv
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: cnx-publishing
    version: "{{ publishing_version }}|default('latest')"
    virtualenv: "/var/cnx/venvs/python2/publishing"
    state: present

- name: install publishing deploy dependencies into the virtualenv
  become: yes
  become_user: "{{ venvs_owner|default('www-data') }}"
  pip:
    name: "{{ item.key }}"
    version: "{{ item.value }}"
    virtualenv: "/var/cnx/venvs/python2/publishing"
    state: present
  with_dict: "{{ publishing_deploy_dependencies }}"

- name: restart publishing
  command: "/bin/true"
  notify:
    - list supervisor applications
    - restart publishing
    - restart publishing workers
    - restart channel processing

# +++
# Configure
# +++

- name: ensure the etc directories exists
  become: yes
  file:
    path: "/etc/{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - cnx
    - cnx/publishing

- name: render configuration
  become: yes
  template:
    src: "{{ item }}"
    dest: "/{{ item }}"
    mode: 0644
    owner: root
    group: root
  with_items:
    - "etc/cnx/publishing/app.ini"
    - "etc/cnx/publishing/logging.yaml"
    - "etc/cnx/publishing/vars.sh"
  notify:
    - list supervisor applications
    - restart publishing
    - restart publishing workers
    - restart channel processing

- name: check whether repository database is initialized
  register: repo_db
  become: yes
  command: "/var/cnx/venvs/python2/publishing/bin/dbmigrator --config /etc/cnx/publishing/app.ini --context cnx-db list"
  ignore_errors: True

- name: initialize repository database
  when: "'You may need to create the schema_migrations table' in repo_db.stdout"
  command: "/bin/true"
  notify:
    - initialize repository database

- name: gather facts from broker
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: yes
  with_items:
    - "{{ groups.broker }}"
